(function(){
	'use strict'

	angular.element(function() {
    angular.bootstrap(document, ['ro-app']);
  });

	angular.module('ro-app', [
		//Third party dependencies
		'ui.router',

		//common directives
		'core.module',
		'loader.module',

		//Application specific
		'mdnid.module',
		'otp.module',
		'roorrmu.module',
		'userbasicdetails.module',
		'useraddressdetails.module',
		'userloandetails.module',
		'userdownloadform.module',
		'signedForm.module',
		'thankyou.module',
		'loanrenewalform.module',
		'statusmessage.module'
	]);
})();

(function(){
	'use strict';
	angular.module('loanrenewalform.module', []);
})();

(function(){
	'use strict';
	angular.module('mdnid.module', []);
})();

(function(){
	'use strict';
	angular.module('otp.module', []);
})();

(function(){
	'use strict';
	angular.module('roorrmu.module', []);
})();

(function(){
	'use strict';
	angular.module('statusmessage.module', []);
})();

(function(){
	'use strict';
	angular.module('thankyou.module', []);
})();

(function(){
	'use strict';
	angular.module('signedForm.module', []);
})();

(function(){
	'use strict';
	angular.module('useraddressdetails.module', []);
})();

(function(){
	'use strict';
	angular.module('userbasicdetails.module', []);
})();

(function(){
	'use strict';
	angular.module('userdownloadform.module', []);
})();

(function(){
	'use strict';
	angular.module('userloandetails.module', []);
})();

(function(){
	'use strict';
	angular.module('core.module', []);
})();

(function(){
	'use strict';
	angular.module('loader.module', []);
})();


(function(){
	'use strict'
	angular.module('ro-app')
		.config(appConfig);

	appConfig.$inject = ['$stateProvider', '$urlRouterProvider', '$httpProvider', '$locationProvider'];

	function appConfig($stateProvider, $urlRouterProvider, $httpProvider, $locationProvider){
		$stateProvider.
			state('mdnid', {
				url: '/',
				templateUrl: 'mdnid/mdnid.html',
    		controller: 'mdnidCntl',
    		controllerAs: 'ro'
			}).
			state('otp', {
				url: '/otp',
				 params: {
                    userId: null,
                    phone : null,
                    customerId : null
                             },
				templateUrl: 'otp/otp.html',
    		controller: 'otpCntl',
    		controllerAs: 'ro'
			}).
			state('roorrmu', {
				url: '/roorrmu',
				 params: {
                       userId: null
                         },
				templateUrl: 'roorrmu/roorrmu.html',
    		controller: 'roorrmuCntl',
    		controllerAs: 'ro'
			}).
			state('userbasicdetails', {
				url: '/userbasicdetails',
				 params: {
                           userId: null
                          },
				templateUrl: 'userbasicdetails/userbasicdetails.html',
    		controller: 'userbasicdetailsCntl',
    		controllerAs: 'ro'
			}).
			state('useraddressdetails', {
				url: '/useraddressdetails',
					 params: {
                           userId: null
                                },
				templateUrl: 'useraddressdetails/useraddressdetails.html',
    		controller: 'useraddressdetailsCntl',
    		controllerAs: 'ro'
			}).
			state('userloandetails', {
				url: '/userloandetails',
				 params: {
                         userId: null
                        },
				templateUrl: 'userloandetails/userloandetails.html',
    		controller: 'userloandetailsCntl',
    		controllerAs: 'ro'
			}).
			state('userdownloadform', {
				url: '/userdownloadform',
				templateUrl: 'userdownloadform/userdownloadform.html',
    		controller: 'userdownloadformCntl',
    		controllerAs: 'ro'
			}).
			state('signedform', {
				url: '/signedform',
				templateUrl: 'uploadsignedform/uploadsignedform.html',
    		controller: 'signedFormCntl',
    		controllerAs: 'ro'
			}).
			state('thankyou', {
				url: '/thankyou',
				params: {
                     userId: null
                                  },
				templateUrl: 'thankyou/thankyou.html',
    		controller: 'thankyouCntl',
    		controllerAs: 'ro'
			}).
			state('loanrenewal', {
				url: '/loanrenewal',
				params: {
                         customerId: null,
                         phone:null,
                         userId:null
                        },
				templateUrl: 'loanrenewalform/loanrenewalform.html',
    		controller: 'loanrenewalformCntl',
    		controllerAs: 'ro'
			}).
			state('statusmessage', {
				url: '/statusmessage',
				params: {
				          statusmessage: null,
				          userId:null
                     },
				templateUrl: 'statusmessage/statusmessage.html',
    		controller: 'statusmessageCntl',
    		controllerAs: 'ro'
			})

			$urlRouterProvider.otherwise('/');
	}
})();

(function(){
	'use strict'

	angular.module('ro-app')
		.service('roService', roService);

	roService.$inject = ['$window','$state'];

	function roService($window,$state){
		var service = this;

		service = {
			logout: logout,
			login : login,
			checkUserIsLoggedIn : checkUserIsLoggedIn
		}
		//this is how you need to add
		//$window.sessionStorage.setItem("userId", "12");
		return service;


		function logout(){
			$window.sessionStorage.clear();
			$state.go('mdnid');
		}

		function login(userId){
			$window.sessionStorage.setItem("userId", userId);
		}

		function checkUserIsLoggedIn(userId)
		{
		if(userId==null)
        		   {
                   logout();
        		   }

		}
	}
})();

(function(ro){
	'use strict';
	angular.module('loanrenewalform.module')
	.service('loanrenewalformService', loanrenewalformService);

	loanrenewalformService.$inject = ['$http', '$q'];

		function loanrenewalformService($http, $q){
    		var service;

    		service = {
          saveRenewalData: saveRenewalData
        };

    		return service;

    		function saveRenewalData(userLoanDetails,customerId,phone,id) {
            var deferred = $q.defer();

    				//in url please enter url of the api
    				//mehtod could be get,post, delete and others standard http requet method
    				//params will consist of the list of parameter(comma separated) that need to be passed in API call
            $http({
                url : 'http://localhost:9090/epayLaterView/updateShopxLoanRenewalAmount',
                method: "POST",
                params: {
                userLoanDetails:userLoanDetails,
                customerId:customerId,
                phone:phone,
                userId:id
    						}
            })
            .success(function (data) {
                deferred.resolve(data);
            })
            .error(function () {
                deferred.reject("Failed to get data");
            });

            return deferred.promise;
        }
    	}

})(window);

(function(ro){
	'use strict';
	angular.module('mdnid.module')
	.service('mdnidService', mdnidService);

	mdnidService.$inject = ['$http', '$q'];

	function mdnidService($http, $q){
		var service;

		service = {
      getAuthenticatedUser: getAuthenticatedUser
    };

		return service;

		function getAuthenticatedUser(customerId, phone) {
        var deferred = $q.defer();

				//in url please enter url of the api
				//mehtod could be get,post, delete and others standard http requet method
				//params will consist of the list of parameter(comma separated) that need to be passed in API call
        $http({
            url : 'http://localhost:9090/epayLaterView/saveCustomerIdData',
            method: "POST",
            params: {
							customerId: customerId,
							phone: phone
						}
        })
        .success(function (data) {
            deferred.resolve(data);
        })
        .error(function (data) {
            deferred.reject("Failed to get data");
        });
				
        return deferred.promise;
    }
	}

})(window);

(function(ro){
	'use strict';
	angular.module('otp.module')
	.service('otpService', otpService);

	otpService.$inject = ['$http', '$q'];

	function otpService($http, $q){
		var service;

		service = {
      getAuthenticatedUser: getAuthenticatedUser
    };

		return service;

		function getAuthenticatedUser(otp,phone,customerId) {
        var deferred = $q.defer();

				//in url please enter url of the api
				//mehtod could be get,post, delete and others standard http requet method
				//params will consist of the list of parameter(comma separated) that need to be passed in API call
        $http({
            url : 'http://localhost:9090/epayLaterView/shopxOtpApiCall',
            method: "POST",
            params: {
							otp: otp,
							phone : phone,
							customerId : customerId
						}
        })
        .success(function (data) {
            deferred.resolve(data);
        })
        .error(function () {
            deferred.reject("Failed to get data");
        });

        return deferred.promise;
    }
	}

})(window);

(function(ro){
	'use strict';
	angular.module('roorrmu.module')
	.service('roorrmuService', roorrmuService);

	roorrmuService.$inject = ['$http', '$q'];

	function roorrmuService($http, $q){
		var service;

		service = {
      postUserType: postUserType
    };

		return service;

		function postUserType(userType,id) {
        var deferred = $q.defer();

				//in url please enter url of the api
				//mehtod could be get,post, delete and others standard http requet method
				//params will consist of the list of parameter(comma separated) that need to be passed in API call
        $http({
            url : 'http://localhost:9090/epayLaterView/saveShopxRoRmu',
            method: "POST",
            params: {
							userType: userType,
							userId : id
						}
        })
        .success(function (data) {
            deferred.resolve(data);
        })
        .error(function () {
            deferred.reject("Failed to post data");
        });

        return deferred.promise;
    }
	}

})(window);

(function(ro){
	'use strict';
	angular.module('statusmessage.module')
	.service('statusmessageService', statusmessageService);

	statusmessageService.$inject = [];

	function statusmessageService(){
		var service;

		service = {
      getStatus: getStatus
    };

		return service;

		function getStatus(otp) {
        var deferred = $q.defer();

			  $http({
            url : 'url',
            method: "GET",
            params: {
						}
        })
        .success(function (data) {
            deferred.resolve(data);
        })
        .error(function () {
            deferred.reject("Failed to get data");
        });

        return deferred.promise;
    }
	}

})(window);

(function(ro){
	'use strict';
	angular.module('thankyou.module')
	.service('thankyouService', thankyouService);

	thankyouService.$inject = [];

	function thankyouService(){

	}

})(window);

(function(ro){
	'use strict';
	angular.module('signedForm.module')
	.service('signedFormService', signedFormService);

	signedFormService.$inject = [];

	function signedFormService(){

	}

})(window);

(function(ro){
	'use strict';
	angular.module('useraddressdetails.module')
	.service('useraddressdetailsService', useraddressdetailsService);

	useraddressdetailsService.$inject = ['$http', '$q'];

	function useraddressdetailsService($http, $q){
		var service,
			userAddressDetailsObject = [{
				"companyname": "",
				"address": "",
				"city": "",
				"pincode": "",
				"businesspan": "",
				"noPanCard": false,
				"shopEstablishment": "",
				"doIDay": "0",
				"doIMonth": "0",
				"doIYear": "0"
			}]

		service = {
      saveUserAddressDetails: saveUserAddressDetails,
			userAddressDetailsObject: userAddressDetailsObject
    };

		return service;

		function saveUserAddressDetails(user,id) {
        var deferred = $q.defer();

				//in url please enter url of the api
				//mehtod could be get,post, delete and others standard http requet method
				//params will consist of the list of parameter(comma separated) that need to be passed in API call
         $http({
                   url : 'http://localhost:9090/epayLaterView/saveShopxUserAddressDetails',
                   method: "POST",
                   params: {
       							user: user,
       							userId:id
       						}
               })
        .success(function (data) {
            deferred.resolve(data);
        })
        .error(function () {
            deferred.reject("Failed to post data");
        });

        return deferred.promise;
    }
	}

})(window);

(function(ro){
	'use strict';
	angular.module('userbasicdetails.module')
	.service('userbasicdetailsService', userbasicdetailsService);

	userbasicdetailsService.$inject = ['$http', '$q'];

	function userbasicdetailsService($http, $q){
		var service,
			userBasicDetailsObject = {
				"firstname": "",
				"middle": "",
				"last": "",
				"email": "",
				"gender": "0",
				"education": "0",
				"dobDay": "0",
				"dobMonth": "0",
				"dobYear": "0",
				"noPanCard": true,
				"panNo": "",
				"govtID": 0,
				"aadharCard": "",
				"driverLicense": "",
				"dlMonth": "0",
				"dlYear": "0",
				"passport": "",
				"passsportMonth": "0",
				"passportYear": "0",
				"voterId": ""
			};

		service = {
      saveUserBasicDetails: saveUserBasicDetails,
			userBasicDetailsObject: userBasicDetailsObject
    };

		return service;

		function saveUserBasicDetails(user,id) {
        var deferred = $q.defer();

				//in url please enter url of the api
				//mehtod could be get,post, delete and others standard http requet method
				//params will consist of the list of parameter(comma separated) that need to be passed in API call
       $http({
                  url : 'http://localhost:9090/epayLaterView/saveShopxUserDetails',
                  method: "POST",
                  dataType: 'json',
                  params: {
      							firstName: user.firstname,
      							middleName :user.middle,
      							lastName : user.last,
      							dobDay : user.dobDay,
      							dobMonth : user.dobMonth,
      							dobYear : user.dobYear,
      							education : user.education,
      							email : user.email,
      							gender : user.gender,
      							passportMonth : user.passsportMonth,
      							passportYear : user.passsportYear,
      							dlMonth : user.dlMonth,
      							dlYear : user.dlYear,
      							panNo : user.panNo,
      							aadharCard : user.aadharCard,
      							driverLicense : user.driverLicense,
      							voterId : user.voterId,
      							passportNumber : user.passport,
      							userId : id

      						}
              })
        .success(function (data) {
            deferred.resolve(data);
        })
        .error(function () {
            deferred.reject("Failed to post data");
        });

        return deferred.promise;
    }
	}

})(window);

(function(ro){
	'use strict';
	angular.module('userdownloadform.module')
	.service('userdownloadformService', userdownloadformService);

	userdownloadformService.$inject = [];

	function userdownloadformService(){

	}

})(window);

(function(ro){
	'use strict';
	angular.module('userloandetails.module')
	.service('userloandetailsService', userloandetailsService);

	userloandetailsService.$inject = ['$http', '$q'];

	function userloandetailsService($http, $q){
		var service,
				idProofs = [{id: 'idProof1', 'value': '', 'fakeValue': ''}],
				addressProofs = [{id: 'addressProof1', 'value': '', 'fakeValue': ''}];

		service = {
			saveUserLoanDetails: saveUserLoanDetails,
			addMoreItems: addMoreItems,
			idProofs: idProofs,
			addressProofs: addressProofs
		};

		return service;

		function saveUserLoanDetails(users, user,userId) {
				var deferred = $q.defer();
				var form = document.querySelector('form');
				var formData = new FormData(form);
        formData.append("user", users);
        formData.append("userId",userId);
        var opts = {
            transformRequest: angular.identity,
            headers: { 'Content-Type': undefined }
        };
				if (user.idProofs.value) {
	        for (var fileIndex = 0; fileIndex < user.idProofs.value.length; fileIndex++) {
	            formData.append("file" + fileIndex, user.idProofs.value[fileIndex]);
	        }
				}
				if (user.addressProofs.length >0) {
                	        for (var fileIndex = 0; fileIndex < user.addressProofs.length; fileIndex++) {
                	            formData.append("file" + fileIndex, user.addressProofs[fileIndex]);
                	        }
                				}
				//in url please enter url of the api
				//mehtod could be get,post, delete and others standard http requet method
				//params will consist of the list of parameter(comma separated) that need to be passed in API call
                   //  transformRequest: angular.identity
                    var uploadUrl="http://localhost:9090/epayLaterView/saveShopxFile";
					 $http.post(uploadUrl, formData, {
                              withCredentials: true,
                             headers: {'Content-Type': undefined },
                             transformRequest: angular.identity
                        }).success(function (data) {
                                   						deferred.resolve(data);
                                   				} ).error(function (data) {
                                                          						deferred.reject("Failed to post data");
                                                          				} );

				return deferred.promise;
		}

		function addMoreItems(obj, textString){
			var newItemNo = obj.length+1;
			obj.push({'id':textString+newItemNo, 'value': ''});
		}
	}

})(window);
(function(){
	'use script';
	angular.module('loader.module')
		.service('loaderService', loaderService);

	function loaderService(){
		this.isLoader = false;
		this.toggle = toggle;
		this.loaderState = loaderState; 

		//To toggle loader
		function toggle(state){
			this.isLoader = state;
		}

		//Returns state of the loader
		function loaderState(){
			return this.isLoader;
		}
	}
})();
(function(){
	'use strict'

	angular.module('ro-app')
		.controller('roCntl', roCntl);

	roCntl.$inject = ['roService'];

	function roCntl(roService){
		var vm = this;

		activate();

		/////////////////////////////

		function activate(){

		}
	}
})();

(function(){
	'use strict';
	angular.module('loanrenewalform.module')
		.controller('loanrenewalformCntl', loanrenewalformCntl);

	loanrenewalformCntl.$inject = ['loanrenewalformService','$state','roService','loaderService'];

	function loanrenewalformCntl(loanrenewalformService,$state,roService,loaderService){
		var vm = this;
        vm.submitLoanRenewalForm = submitLoanRenewalForm;
		vm.returnPartial = returnPartial;
		vm.resolveAuthenticatedUser = resolveAuthenticatedUser;
		vm.errorAuthenticatedUser = errorAuthenticatedUser;
		vm.logout = logout;
		vm.gotorormu = gotorormu;
		vm.loanAmount;
		activate();

		///////////////////////////
        function submitLoanRenewalForm(isValid)
        {
            if(isValid){
            				loaderService.toggle(true);
				//this API will call when user passed out of form validations
				//this API function(getAuthenticatedUser) is written inside the services
				//this will either return success(resolveAuthenticatedUser) or error message(errorAuthenticatedUser)
				loanrenewalformService.saveRenewalData(vm.userLoanDetails,$state.params.customerId,$state.params.phone,$state.params.userId).then(resolveAuthenticatedUser, errorAuthenticatedUser);
			}
        }
        function logout(){
                    roService.logout();
                   		}
                  function gotorormu(){
                  $state.go('roorrmu',{userId: $state.params.userId});
                                    }

        	function resolveAuthenticatedUser(data){
        	   var element = angular.element('#loanCheckModal');
        			if(data.loanValid == true){
                     $state.go('thankyou',{userId :$state.params.userId});
                     				loaderService.toggle(false);

        			}
        			else if(data.loanValid == false){
        			  loaderService.toggle(false);
        			  vm.loanAmount = data.amount;
                      element.modal('show');

        			}
        		}
        		//this is the function called when error is return from api call
        		function errorAuthenticatedUser(error){
        			loaderService.toggle(false);
        			console.log(error);
        		}
		function activate(){
                         roService.checkUserIsLoggedIn($state.params.userId);
                		}

		function returnPartial(view){
			return './shared/partial/_' + view + '.html';
		}
	}
})();

(function(){
	'use strict';
	angular.module('mdnid.module')
		.controller('mdnidCntl', mdnidCntl);

	mdnidCntl.$inject = ['mdnidService', '$state', 'loaderService','roService'];

	function mdnidCntl(mdnidService, $state, loaderService,roService){
		var vm = this;
		vm.phoneNumberRegex = '\\d{10}';
		vm.mdnidregex = '\\d{10}';
		vm.submitMdnidForm = submitMdnidForm;
		vm.errorText="";
		vm.loginFailed=false;
		activate();

		///////////////////////////

		function activate(){

		}

		function submitMdnidForm(isValid){
			if(isValid){
				//this will call the loading module
				//whenever need to make any api call call this loaderservice to show loading icon with full-overlay
				loaderService.toggle(true);
				//this API will call when user passed out of form validations
				//this API function(getAuthenticatedUser) is written inside the services
				//this will either return success(resolveAuthenticatedUser) or error message(errorAuthenticatedUser)
				mdnidService.getAuthenticatedUser(vm.customerId, vm.phoneNumber).then(resolveAuthenticatedUser, errorAuthenticatedUser);
			}
		}
		//this is the function called when success is return from api call
		function resolveAuthenticatedUser(data){
			if(data.status == true){
				roService.login(data.userId);
				$state.go('otp',{userId : data.userId,phone : data.phone,customerId : data.customerId });
				loaderService.toggle(false);
			}
			else if(data.status == false)
			{
			 loaderService.toggle(false);
			 vm.loginFailed = true;
             vm.errorText = data.error_text;
			}
		}
		//this is the function called when error is return from api call
		function errorAuthenticatedUser(error){
			loaderService.toggle(false);
			console.log(error);
		}

	}
})();

(function(){
	'use strict';
	angular.module('otp.module')
		.controller('otpCntl', otpCntl);

	otpCntl.$inject = ['otpService','$state','roService','$scope','loaderService'];

	function otpCntl(otpService,$state,roService,$scope,loaderService){
		var vm = this;
		vm.submitOtpForm = submitOtpForm;
		vm.errorMessage ="";

		activate();

		///////////////////////////

		function activate(){
         roService.checkUserIsLoggedIn($state.params.userId);
		}

		function submitOtpForm(isValid){
			if(isValid){
				loaderService.toggle(true);
				//this API will call when user passed out of form validations
				//this API function(getAuthenticatedUser) is written inside the services
				//this will either return success(resolveAuthenticatedUser) or error message(errorAuthenticatedUser)
				otpService.getAuthenticatedUser(vm.otp,$state.params.phone,$state.params.customerId).then(resolveAuthenticatedUser, errorAuthenticatedUser);
			}
		}
		//this is the function called when success is return from api call
		function resolveAuthenticatedUser(data){
			if(data.status == true){
			if(data.applicationStatus == "none")
				$state.go('roorrmu',{userId: $state.params.userId});
				else if(data.applicationStatus == "applicableForRenewal")
				$state.go('loanrenewal',{customerId: $state.params.customerId , phone: $state.params.phone,userId: $state.params.userId});
				else
				$state.go('statusmessage',{statusmessage: data.applicationStatus,userId:$state.params.userId});
				//workflow on new user or existing user need to be added here
				//api need to return is the user is new or old
			loaderService.toggle(false);
			}else{
				//wrong otp
				//otp authentication failed
				vm.errorMessage = data.errorText;
				loaderService.toggle(false);

			}
		}
		//this is the function called when error is return from api call
		function errorAuthenticatedUser(error){
		 loaderService.toggle(false);
		 console.log(error);
		}
	}
})();

(function(){
	'use strict';
	angular.module('roorrmu.module')
		.controller('roorrmuCntl', roorrmuCntl);

	roorrmuCntl.$inject = ['roorrmuService', '$state','roService','loaderService'];

	function roorrmuCntl(roorrmuService, $state,roService,loaderService){
		var vm = this;
		vm.submitRoOrRmuForm = submitRoOrRmuForm;
		vm.logout = logout;

		activate();

		///////////////////////////

		function activate(){
                 roService.checkUserIsLoggedIn($state.params.userId);
        		}

		function submitRoOrRmuForm(isValid){
			if(isValid){
				//this API will call when user passed out of form validations
				//this API function(getUserType) is written inside the services
				//this will either return success(resolveUserType) or error message(errorUserType)
				loaderService.toggle(true);
				roorrmuService.postUserType(vm.userType,$state.params.userId).then(resolveUserType, errorUserType);
			}
		}
		//this is the function called when success is return from api call
		function resolveUserType(data){
			if(data.status == true){
                 $state.go('userbasicdetails',{userId : data.userId});
                 loaderService.toggle(false);
                 			}
		}
		//this is the function called when error is return from api call
		function errorUserType(error){
		 loaderService.toggle(false);
			console.log(error);
		}
			function logout(){
        			roService.logout();
        		}
	}
})();

(function(){
	'use strict';
	angular.module('statusmessage.module')
		.controller('statusmessageCntl', statusmessageCntl);

	statusmessageCntl.$inject = ['statusmessageService', '$rootScope', '$state','roService'];

	function statusmessageCntl(statusmessageService, $rootScope, $state,roService){
		var vm = this;

		vm.returnPartial = returnPartial;
		vm.logout = logout;
		vm.statusmessage = $state.params.statusmessage;
		activate();

		///////////////////////////

		function activate(){
                         roService.checkUserIsLoggedIn($state.params.userId);
                		}

		function returnPartial(view){
			return './shared/partial/_' + view + '.html';
		}

		function logout(){
			// var data = {
			// 	'message' : 'Successfully logout.',
			// 	'error' : false
			// };
			// notificationService.setNotification(data);
			// //Show notification
			// $rootScope.$broadcast('showNotification');
			$state.go('mdnid');

		}

		function submitOtpForm(isValid){
				statusmessageService.getStatus().then(resolveStatus, errorStatus);
		}
		//this is the function called when success is return from api call
		function resolveStatus(data){
			if(data == true){
			}else{
			}
		}
		//this is the function called when error is return from api call
		function errorStatus(error){
			console.log(error);
		}

	}
})();

(function(){
	'use strict';
	angular.module('thankyou.module')
		.controller('thankyouCntl', thankyouCntl);

	thankyouCntl.$inject = ['thankyouService','roService','$state','loaderService'];

	function thankyouCntl(thankyouService,roService,$state,loaderService){
		var vm = this;

		vm.returnPartial = returnPartial;
		vm.logout = logout;

		activate();

		///////////////////////////

		function activate(){
						loaderService.toggle(true);
                         roService.checkUserIsLoggedIn($state.params.userId);
                						loaderService.toggle(false);
                		}
          function logout(){
                roService.logout();
              		}
		function returnPartial(view){
			return './shared/partial/_' + view + '.html';
		}

	}
})();

(function(){
	'use strict';
	angular.module('signedForm.module')
		.controller('signedFormCntl', signedFormCntl);

	signedFormCntl.$inject = ['signedFormService','roService'];

	function signedFormCntl(signedFormService,roService){
		var vm = this;
		vm.roService = roService;

		vm.returnPartial = returnPartial;
		activate();

		///////////////////////////

		function activate(){

		}

		function returnPartial(view){
			return './shared/partial/_' + view + '.html';
		}
			function logout(){
                   roService.logout();
                   		}
	}
})();

(function(){
	'use strict';
	angular.module('useraddressdetails.module')
		.controller('useraddressdetailsCntl', useraddressdetailsCntl);

	useraddressdetailsCntl.$inject = ['useraddressdetailsService', '$state','roService','loaderService'];

	function useraddressdetailsCntl(useraddressdetailsService, $state,roService,loaderService){
		var vm = this;

		vm.returnPartial = returnPartial;
		vm.submitUserAddressDetails = submitUserAddressDetails;
		vm.userAddressDetailsObject = useraddressdetailsService.userAddressDetailsObject;
		vm.logout = logout;
		activate();

		///////////////////////////

		function activate(){
                         roService.checkUserIsLoggedIn($state.params.userId);
                		}

		function returnPartial(view){
			return './shared/partial/_' + view + '.html';
		}

		function submitUserAddressDetails(isValid){
			if(isValid){
			loaderService.toggle(true);
				//this API will call when user passed out of form validations
				//this API function(saveUserBasicDetails) is written inside the services
				//this will either return success(resolveUserDetails) or error message(errorUserDetails)
				useraddressdetailsService.saveUserAddressDetails(vm.userAddressDetails,$state.params.userId).then(resolveUserDetails, errorUserDetails);
			}
		}
		//this is the function called when success is return from api call
		function resolveUserDetails(data){
			if(data.status == true){
				$state.go('userloandetails',{userId:$state.params.userId});
				loaderService.toggle(false);
				//data is posted successfully
			}
		}
		//this is the function called when error is return from api call
		function errorUserDetails(error){
			loaderService.toggle(false);
			console.log(error);
		}
		function logout(){
           roService.logout();
           		}

	}
})();

(function(){
	'use strict';
	angular.module('userbasicdetails.module')
		.controller('userbasicdetailsCntl', userbasicdetailsCntl);

	userbasicdetailsCntl.$inject = ['userbasicdetailsService','$state', 'roService','loaderService'];

	function userbasicdetailsCntl(userbasicdetailsService,$state, roService,loaderService){
		var vm = this;

		vm.returnPartial = returnPartial;
		vm.submitUserBasicDetailsForm = submitUserBasicDetailsForm;
		vm.emailregex = new RegExp('.+@.+\\..+');
		vm.panNumberRegex = new RegExp('[A-Z]{5}[0-9]{4}[A-Z]{1}$');
		vm.aadharRegex = new RegExp('[0-9]{4} [0-9]{4} [0-9]{4}');
		vm.voterIDRegex = new RegExp('[A-Z]{3}[0-9]{7}$');
		vm.driverLicenseRegex = new RegExp('^[0-9a-zA-Z]{4,9}$');
		vm.passportRegex = new RegExp('[A-PR-WYa-pr-wy][1-9][0-9]\\s?[0-9]{4}[1-9]$');
		vm.userBasicDetails = userbasicdetailsService.userBasicDetailsObject;
		vm.logout = logout;
		activate();

		///////////////////////////
               function activate(){
                 roService.checkUserIsLoggedIn($state.params.userId);
        		}


		function returnPartial(view){
			return './shared/partial/_' + view + '.html';
		}

		function submitUserBasicDetailsForm(isValid){
			if(isValid){
			loaderService.toggle(true);
				//this API will call when user passed out of form validations
				//this API function(saveUserBasicDetails) is written inside the services
				//this will either return success(resolveUserDetails) or error message(errorUserDetails)
				userbasicdetailsService.saveUserBasicDetails(vm.userBasicDetails,$state.params.userId).then(resolveUserDetails, errorUserDetails);
			}
		}
		 function logout(){
        			roService.logout();
        		}

		//this is the function called when success is return from api call
		function resolveUserDetails(data){
			if(data.status == true){
				$state.go('useraddressdetails',{userId: data.userId});
				//data is posted successfully
			loaderService.toggle(false);
			}
		}
		//this is the function called when error is return from api call
		function errorUserDetails(error){
			loaderService.toggle(false);
			console.log(error);
		}
	}
})();

(function(){
	'use strict';
	angular.module('userdownloadform.module')
		.controller('userdownloadformCntl', userdownloadformCntl);

	userdownloadformCntl.$inject = ['userdownloadformService','roService','$state'];

	function userdownloadformCntl(userdownloadformService,roService,$state){
		var vm = this;

		vm.returnPartial = returnPartial;
		vm.logout = logout;
		activate();

		///////////////////////////

		function activate(){
                         roService.checkUserIsLoggedIn($state.params.userId);
                		}
			function logout(){
                   roService.logout();
                   		}

		function returnPartial(view){
			return './shared/partial/_' + view + '.html';
		}

	}
})();

(function(){
	'use strict';
	angular.module('userloandetails.module')
		.controller('userloandetailsCntl', userloandetailsCntl);

	userloandetailsCntl.$inject = ['userloandetailsService', '$scope', '$timeout','roService','$state','$http','loaderService'];

	function userloandetailsCntl(userloandetailsService, $scope, $timeout,roService,$state,$http,loaderService){
		var vm = this;
		vm.userloandetails = [];
		vm.returnPartial = returnPartial;
		vm.submitUserLoanDetailsForm = submitUserLoanDetailsForm;
		vm.addMoreItems = addMoreItems;
		vm.userloandetails.idProofs = userloandetailsService.idProofs;
		vm.userloandetails.addressProofs = userloandetailsService.addressProofs;
		vm.uploadCopy = uploadCopy;
		vm.logout = logout;
		activate();

		///////////////////////////

		function activate(){
                         roService.checkUserIsLoggedIn($state.params.userId);
                		}

		function returnPartial(view){
			return './shared/partial/_' + view + '.html';
		}

		function submitUserLoanDetailsForm(isValid){
			if(isValid){
				loaderService.toggle(true);
				//this API will call when user passed out of form validations
				//this API function(saveUserBasicDetails) is written inside the services
				//this will either return success(resolveUserDetails) or error message(errorUserDetails)
				userloandetailsService.saveUserLoanDetails(vm.userLoanDetails, vm.userloandetails,$state.params.userId).then(resolveUserDetails, errorUserDetails);
			}
		}
		//this is the function called when success is return from api call
		function resolveUserDetails(data){
			if(data.status == true){
				$state.go('thankyou',{userId: $state.params.userId});
				//data is posted successfully
					loaderService.toggle(false);
			}
		}
			function logout(){
                   roService.logout();
                   		}
		//this is the function called when error is return from api call
		function errorUserDetails(error){
			loaderService.toggle(false);
			console.log(error);
		}

		function addMoreItems(obj, textString){
			userloandetailsService.addMoreItems(obj, textString);
		}

		function uploadCopy(id){
			document.getElementById(id).click();
		}
		$scope.fileNameChangedIdProof = function(e){

			if (!vm.userloandetails.idProofs.value)
					vm.userloandetails.idProofs.value = [];

			if (!vm.userloandetails.idProofs.fakeValue)
					vm.userloandetails.idProofs.fakeValue = [];
					$timeout(function() {
						$scope.$apply(function () {
		            if (e && e.files) {
		                for (var i = 0; i < e.files.length; i++) {
		                    if (vm.userloandetails.idProofs.fakeValue.indexOf(e.files[i].name) !== -1) continue;

		                    vm.userloandetails.idProofs.fakeValue.push((e.files[i].name).replace('C:\\fakepath\\', ''));
		                    vm.userloandetails.idProofs.value.push(e.files[i]);
		                }
		            }
		        });
					}, 0);
				console.log(vm.userloandetails.idProofs);
		}

		$scope.fileNameChangedAddressProof = function(event){
			var value = event.target.value;
	    if(typeof value !== "undefined"){
	      var fakeValue = value.replace('C:\\fakepath\\', '');
	      $scope.$apply(function() {
						vm.userloandetails.addressProofs[vm.userloandetails.addressProofs.length-1].fakeValue = fakeValue;
						vm.userloandetails.addressProofs[vm.userloandetails.addressProofs.length-1].value = value;
	      });
	    }
		}

	}
})();
(function(){
	'use strict';
	angular.module('core.module')
		.directive('popoverTrig', popoverTrig)

		popoverTrig.$inject = [];

		function popoverTrig(){
			var directive;

			directive = {
				restrict : 'A',
				scope : {},
				link : linkFunction
			}

			return directive;

			///////////////////////////////////////

			function linkFunction(scope, element, attrs){
				var _element = element,
            input = _element.closest('.input-group').find('input'),
						select = _element.closest('.row').find('select'),
						textarea = _element.closest('.row').find('textarea');

				_element.on('click', popoverHandler);

				function popoverHandler(event){
          input.popover('show');
					select.popover('show');
					textarea.popover('show');
				}

        input.on('keydown', hidePopover);
        textarea.on('keydown', hidePopover);
				select.on('focus', hidePopover);

        function hidePopover(event){
          if(input.hasClass('validation-error')){
            input.popover('hide');
          }else if(textarea.hasClass('validation-error')){
          	textarea.popover('hide');
          }
					select.popover('destroy');
        }

				$(window).off("resize").on("resize", function() {
				    $(".popover").each(function() {
				        var popover = $(this);
								if ( $(window).width() < 767 ){
									var ctrl = $(popover.context);
									ctrl.popover('destroy');
								}else{
									if (popover.is(":visible")) {
					            var ctrl = $(popover.context);
					            ctrl.popover('show');
					        }
								}
				    });
				});
			}
		}
})();

(function(){
	'use strict';
	angular.module('loader.module')
		.directive('roLoader', roLoader);

	roLoader.$inject = ['loaderService'];

	function roLoader(loaderService) {
	    var directive =  {
	        restrict : 'E',
	        templateUrl : './shared/loader/loader.html',
	        scope : false,
	        replace: true,
	        link : function(scope, element, attrs){
	        	var _this = scope;

	        	_this.$watch(
        			function(){
        				return loaderService.isLoader;
        			},

	        		function(){
		        		var flag = loaderService.isLoader;
		        		if(flag){
		        			element.show();
		        		}else{
			        		element.hide();
			        	}
	        		}
	        	);
	        }
	    };
	    return directive;
	}
})();
